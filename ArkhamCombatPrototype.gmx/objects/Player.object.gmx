<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movementSpdModifier = 300
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Movement
if (global.horizontalMov != 0 || global.verticalMov != 0) {
    direction = point_direction(0,0,global.horizontalMov,global.verticalMov)
}

direction = point_direction(x, y, mouse_x, mouse_y)

normalizedSpdVector = clamp(point_distance(0,0,global.horizontalMov,global.verticalMov), 0, 1.00)
speed = normalizedSpdVector * movementSpdModifier * delta_time / 1000000

visionDistance = 300

leftVisionAngle = direction + 22
rightVisionAngle = direction - 22

leftVisionEndPoint_X = lengthdir_x(visionDistance, leftVisionAngle)
leftVisionEndPoint_Y = lengthdir_y(visionDistance, leftVisionAngle)
rightVisionEndPoint_X = lengthdir_x(visionDistance, rightVisionAngle)
rightVisionEndPoint_Y = lengthdir_y(visionDistance, rightVisionAngle)

enemiesInVision = getAryOfInstancesInTriangle(oEnemy, x, y, x + leftVisionEndPoint_X, y + leftVisionEndPoint_Y, x + rightVisionEndPoint_X, y + rightVisionEndPoint_Y)



if (array_length_1d(enemiesInVision) == 1) {
    closestEnemy = enemiesInVision[0]
} else {
    closestEnemy = enemiesInVision[0]
    
    for (var i = 1; i &lt; array_length_1d(enemiesInVision); i++) {
        if (distance_to_object(enemiesInVision[i]) &lt; distance_to_object(closestEnemy)) {
            closestEnemy = enemiesInVision[i]
        }
    }
}




/*
rightSideFound = false
leftSideFound = false
closestEnemy = 0
for (var i = 1; i &lt;= 22; i++) {
    if (rightSideFound == false) {
        closestEnemyRight = collision_line(x, y, x + lengthdir_x(visionDistance, direction - i), y + lengthdir_y(visionDistance, direction - i), oEnemy, false, true) 
    }
    if (closestEnemyRight &gt; 0) {
        rightSideFound = true
    }
    
    if (leftSideFound == false) {
        closestEnemyLeft = collision_line(x, y, x + lengthdir_x(visionDistance, direction + i), y + lengthdir_y(visionDistance, direction + i), oEnemy, false, true)    
    }
    if (closestEnemyLeft &gt; 0) {
        leftSideFound = true
    }
}

if (closestEnemyRight &gt; 0 &amp;&amp; closestEnemyLeft &lt; 0) {
    closestEnemy = closestEnemyRight
} else if (closestEnemyRight &lt; 0 &amp;&amp; closestEnemyLeft &gt; 0) {
    closestEnemy = closestEnemyLeft
} else if (closestEnemyRight == closestEnemyLeft) {
    closestEnemy = closestEnemyLeft
} else if (closestEnemyRight &gt; 0 &amp;&amp; closestEnemyLeft &gt; 0) {
    if (distance_to_object(closestEnemyRight) &lt; distance_to_object(closestEnemyLeft)) {
        closestEnemy = closestEnemyRight
    } else {
        closestEnemy = closestEnemyLeft
    }
}
*/



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw Player vision cone triangle
draw_set_color(c_white)
draw_set_alpha(0.2)
draw_triangle(x, y, x + leftVisionEndPoint_X, y + leftVisionEndPoint_Y, x + rightVisionEndPoint_X, y + rightVisionEndPoint_Y, false)

// Draw Player direction line
draw_set_alpha(1)
draw_line(x, y, x + lengthdir_x(100, direction), y + lengthdir_y(100, direction))

// Draw line to targetted enemy
if (closestEnemy &gt; 0) {
    draw_line(x, y, closestEnemy.x, closestEnemy.y)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
